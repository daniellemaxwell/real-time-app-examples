// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file candy.proto (package candy, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message candy.CandyRequest
 */
export class CandyRequest extends Message<CandyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: float price = 3;
   */
  price = 0;

  constructor(data?: PartialMessage<CandyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "candy.CandyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "price", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CandyRequest {
    return new CandyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CandyRequest {
    return new CandyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CandyRequest {
    return new CandyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CandyRequest | PlainMessage<CandyRequest> | undefined, b: CandyRequest | PlainMessage<CandyRequest> | undefined): boolean {
    return proto3.util.equals(CandyRequest, a, b);
  }
}

/**
 * @generated from message candy.CandyResponse
 */
export class CandyResponse extends Message<CandyResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<CandyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "candy.CandyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CandyResponse {
    return new CandyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CandyResponse {
    return new CandyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CandyResponse {
    return new CandyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CandyResponse | PlainMessage<CandyResponse> | undefined, b: CandyResponse | PlainMessage<CandyResponse> | undefined): boolean {
    return proto3.util.equals(CandyResponse, a, b);
  }
}

